const axios = require('../axios');
const set = require('lodash/set');
const merge = require('lodash/merge');
const https = require('https');
const fs = require('fs');

// Environment variables injected during generation
const env = {
  directExecute: {{executionConfig.directExecute}},
  mtls: {
    certPath: '{{executionConfig.mtls.certPath}}',
    keyPath: '{{executionConfig.mtls.keyPath}}',
    caPath: '{{executionConfig.mtls.caPath}}',
    rejectUnauthorized: {{executionConfig.mtls.rejectUnauthorized}},
  }
};

const functions = [
{{#each specifications}}
  ['{{#if context}}{{context}}.{{/if}}{{name}}', '{{id}}',{{#each function.arguments}}'{{name}}',{{/each}}],
{{/each}}
];

// Create MTLS agent if paths are provided
const createHttpsAgent = () => {
  const { mtls } = env;
  if (!mtls.certPath || !mtls.keyPath || !mtls.caPath) {
    return undefined;
  }
  return new https.Agent({
    cert: fs.readFileSync(mtls.certPath),
    key: fs.readFileSync(mtls.keyPath),
    ca: fs.readFileSync(mtls.caPath),
    rejectUnauthorized: mtls.rejectUnauthorized,
  });
};

module.exports = (clientID, polyCustom) => merge(
  {},
  functions.reduce(
    (acc, [path, id, ...argKeys]) => set(
      acc,
      path,
      (...args) => {
        const requestStartTime = Date.now();
        const requestArgs = argKeys.reduce((acc, key, index) => ({ ...acc, [key]: args[index] }), {});
        
        // Check if direct execution is enabled
        const { directExecute } = env;
        
        if (directExecute === true) {
          // Make direct API call
          const httpsAgent = createHttpsAgent();

          let polyHeaders;

          return axios.post(
            `/functions/api/${id}/direct-execute?clientId=${clientID}`,
            requestArgs,
            {
              headers: {
                'x-poly-execution-id': polyCustom.executionId,
              }
            }
          ).then(({ headers, data }) => {
            polyHeaders = headers;
            if (data && (data.status < 200 || data.status >= 300)) {
              console.error('Error getting direct execution data for api function with id:', id, 'Status code:', data.status, 'Request data:', requestArgs, 'Response data:', data.data);
            }
            return axios({
              ...data,
              headers: {
                ...data.headers,
              },
              httpsAgent,
            })
          }).then(({ headers, data, status, ...args }) => {
            if (status && (status < 200 || status >= 300)) {
              console.error('Error direct executing api function with id:', id, 'Status code:', status, 'Request data:', requestArgs, 'Response data:', data.data);
            }
            const serverExecutionTimeMs = Number(polyHeaders['x-poly-execution-duration']);
            const roundTripNetworkLatencyMs = Date.now() - requestStartTime - serverExecutionTimeMs;
            return {
              data: data,
              status: status,
              headers: { ...headers },
              metrics: {
                roundTripNetworkLatencyMs,
                serverExecutionTimeMs,
              }
            };
          });
        }

        // default indirect execution
        return axios.post(
          `/functions/api/${id}/execute?clientId=${clientID}`,
          {
            ...requestArgs,
          },
          {
            headers: {
              'x-poly-execution-id': polyCustom.executionId,
            }
          }
        ).then(({ headers, data }) => {
          if (data && (data.status < 200 || data.status >= 300)) {
            console.error('Error executing api function with id:', id, 'Status code:', data.status, 'Request data:', requestArgs, 'Response data:', data.data);
          }
          const serverExecutionTimeMs = Number(headers['x-poly-execution-duration']);
          const roundTripNetworkLatencyMs = Date.now() - requestStartTime - serverExecutionTimeMs;
          return {
            ...data,
            metrics: {
              roundTripNetworkLatencyMs,
              serverExecutionTimeMs,
            }
          };
        });
      }),
    {}
  )
);
